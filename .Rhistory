sim[,9] = sqrt(sim[,9])
sim[,11] = sqrt(sim[,11])
sim_means = apply(sim,2,mean)
subsample.sizes = c('250','500','All','SEPIA')
nbhd.sizes = c('50','100','250','500','1000','SEPIA')
shots = c('104','105','106','All')
features = c("104_1","104_2","104_3","104_4",
"105_1","105_2","105_3","105_4",
"106_1","106_2","106_3","106_4",
"All")
em.types = c('sep','joint')
df.mape = data.frame(data.subsamp = factor(levels=subsample.sizes,ordered=T),
nbhd.size = factor(levels=nbhd.sizes, ordered=T),
shot = factor(levels=shots,ordered=T),
feature = factor(levels=features,ordered=T),
em = factor(levels=em.types,ordered = T),
mape = numeric())
mape.means.250 = t(apply(mape.250,2:3,mean))
mape.median.250 = t(apply(mape.250,2:3,median))
mape.means.500 = t(apply(mape.500,2:3,mean))
mape.median.500 = t(apply(mape.500,2:3,median))
mape.means.all = apply(ape.array.all,2:3,mean)
mape.means.all = apply(mape.all,2:3,mean)
mape.median.all = apply(mape.all,2:3,median)
sepia_cv = t(R.matlab::readMat('SEPIA_loocv_pred.mat')$cvpred)
sim = 10000*cbind(as.matrix(read.csv("../data/ysim_104.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_105.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_106.csv")[c(4,6,8,10)]))
sepia_ape = 100*abs(sepia_cv-sim)/sim
sepia_ape_mean = apply(sepia_ape,2,mean)
sepia_ape_median = apply(sepia_ape,2,median)
for(j in 1:5){
df.mape = rbind(df.mape,data.frame(data.subsamp = '250',
nbhd.size = nbhd.sizes[j],
shot = rep(shots[1:3],each=4),
feature = features[1:12],
em = em.types[2],
mape = mape.median.250[j,]))
df.mape = rbind(df.mape,data.frame(data.subsamp = '250',
nbhd.size = nbhd.sizes[j],
shot = shots[4],
feature = features[13],
em = em.types[2],
mape = mean(mape.median.250[j,])))
# 500
df.mape = rbind(df.mape,data.frame(data.subsamp = '500',
nbhd.size = nbhd.sizes[j],
shot = rep(shots[1:3],each=4),
feature = features[1:12],
em = em.types[2],
mape = mape.median.500[j,]))
df.mape = rbind(df.mape,data.frame(data.subsamp = '500',
nbhd.size = nbhd.sizes[j],
shot = shots[4],
feature = features[13],
em = em.types[2],
mape = mean(mape.median.500[j,])))
# 1000 (all)
df.mape = rbind(df.mape,data.frame(data.subsamp = 'All',
nbhd.size = nbhd.sizes[j],
shot = rep(shots[1:3],each=4),
feature = features[1:12],
em = em.types[2],
mape = mape.median.all[j,]))
df.mape = rbind(df.mape,data.frame(data.subsamp = 'All',
nbhd.size = nbhd.sizes[j],
shot = shots[4],
feature = features[13],
em = em.types[2],
mape = mean(mape.median.all[j,])))
}
mape.means.all = t(apply(mape.all,2:3,mean))
mape.median.all = t(apply(mape.all,2:3,median))
sepia_cv = t(R.matlab::readMat('SEPIA_loocv_pred.mat')$cvpred)
sim = 10000*cbind(as.matrix(read.csv("../data/ysim_104.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_105.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_106.csv")[c(4,6,8,10)]))
sepia_ape = 100*abs(sepia_cv-sim)/sim
sepia_ape_mean = apply(sepia_ape,2,mean)
sepia_ape_median = apply(sepia_ape,2,median)
for(j in 1:5){
df.mape = rbind(df.mape,data.frame(data.subsamp = '250',
nbhd.size = nbhd.sizes[j],
shot = rep(shots[1:3],each=4),
feature = features[1:12],
em = em.types[2],
mape = mape.median.250[j,]))
df.mape = rbind(df.mape,data.frame(data.subsamp = '250',
nbhd.size = nbhd.sizes[j],
shot = shots[4],
feature = features[13],
em = em.types[2],
mape = mean(mape.median.250[j,])))
# 500
df.mape = rbind(df.mape,data.frame(data.subsamp = '500',
nbhd.size = nbhd.sizes[j],
shot = rep(shots[1:3],each=4),
feature = features[1:12],
em = em.types[2],
mape = mape.median.500[j,]))
df.mape = rbind(df.mape,data.frame(data.subsamp = '500',
nbhd.size = nbhd.sizes[j],
shot = shots[4],
feature = features[13],
em = em.types[2],
mape = mean(mape.median.500[j,])))
# 1000 (all)
df.mape = rbind(df.mape,data.frame(data.subsamp = 'All',
nbhd.size = nbhd.sizes[j],
shot = rep(shots[1:3],each=4),
feature = features[1:12],
em = em.types[2],
mape = mape.median.all[j,]))
df.mape = rbind(df.mape,data.frame(data.subsamp = 'All',
nbhd.size = nbhd.sizes[j],
shot = shots[4],
feature = features[13],
em = em.types[2],
mape = mean(mape.median.all[j,])))
}
#save(df.mape,file='data/MAPE.Rdata')
ape_mean = apply(sepia_ape,2,mean)
ape_median = apply(sepia_ape,2,median)
df.mape = rbind(df.mape,data.frame(data.subsamp = subsample.sizes[4],
nbhd.size=nbhd.sizes[6],
shot=c(rep(shots[1:3],each=4),shots[4]),
feature=features,
em=em.types[2],
mape = c(ape_median,mean(ape_median))))
df.mape$data.subsamp = factor(df.mape$data.subsamp,levels=subsample.sizes,ordered=T)
df.mape$nbhd.size = factor(df.mape$nbhd.size,levels=nbhd.sizes, ordered=T)
df.mape$shot = factor(df.mape$shot,levels=shots,ordered=T)
df.mape$feature = factor(df.mape$feature,levels=features,ordered=T)
category_order = c("104_1","104_3","105_1","105_3",
"106_1","106_3","104_2","104_4",
"105_2","105_4","106_2","106_4",
"All")
df.mape$feature = factor(df.mape$feature, levels=category_order)
p = ggplot(df.mape) + geom_point(aes(x=feature,y=mape,color=nbhd.size,shape=data.subsamp),size=3,position=position_jitter(w = 0.2, h = 0)) +
scale_colour_manual(values=cbPalette) + scale_shape_manual(values=c(15,16,17,8)) +
labs(x='Feature',y='MAPE [%]',color='Neignborhood Size',shape='Subsample Size',title='Leave-One-Out CV') + coord_cartesian(ylim=c(0,6))
plot(p)
mape.means.all
mape.all
mape.median.500
mape.means.all
mape.median.all
rm(mape)
load('Al-5083_JEm.RData')
mape
mape[,,5]
mape.all = mape
sim = 10000*cbind(as.matrix(read.csv("../data/ysim_104.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_105.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_106.csv")[c(4,6,8,10)]))
sim[,5] = sqrt(sim[,5])
sim[,7] = sqrt(sim[,7])
sim[,9] = sqrt(sim[,9])
sim[,11] = sqrt(sim[,11])
sim_means = apply(sim,2,mean)
subsample.sizes = c('250','500','All','SEPIA')
nbhd.sizes = c('50','100','250','500','1000','SEPIA')
shots = c('104','105','106','All')
features = c("104_1","104_2","104_3","104_4",
"105_1","105_2","105_3","105_4",
"106_1","106_2","106_3","106_4",
"All")
em.types = c('sep','joint')
df.mape = data.frame(data.subsamp = factor(levels=subsample.sizes,ordered=T),
nbhd.size = factor(levels=nbhd.sizes, ordered=T),
shot = factor(levels=shots,ordered=T),
feature = factor(levels=features,ordered=T),
em = factor(levels=em.types,ordered = T),
mape = numeric())
mape.means.250 = t(apply(mape.250,2:3,mean))
mape.median.250 = t(apply(mape.250,2:3,median))
mape.means.500 = t(apply(mape.500,2:3,mean))
mape.median.500 = t(apply(mape.500,2:3,median))
mape.means.all = t(apply(mape.all,2:3,mean))
mape.median.all = t(apply(mape.all,2:3,median))
sum(is.na(mape.all))
which(is.na(mape.all))
which(is.na(mape.all),arr.ind = T)
ggplot(df, aes(x = x, y = y, colour = val)) +
geom_point()
df = data.frame(x=x[,1],y=x[,2],val=data)
x
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbPalette <- c("#999999", "#CC79A7", "#009E73", "#0072B2", "#F0E442","#D55E00")
library(tibble)
library(ggplot2)
setwd("~/FlaGP/examples/Al-5083/paper")
load('Al-5083_JEm_ss_250.RData')
mape.250 = mape
load('Al-5083_JEm_ss_500.RData')
mape.500 = mape
load('Al-5083_JEm.RData')
load('Al-5083_JEm.RData')
mape.all = mape
sim = 10000*cbind(as.matrix(read.csv("../data/ysim_104.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_105.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_106.csv")[c(4,6,8,10)]))
sim[,5] = sqrt(sim[,5])
sim[,7] = sqrt(sim[,7])
sim[,9] = sqrt(sim[,9])
sim[,11] = sqrt(sim[,11])
sim_means = apply(sim,2,mean)
subsample.sizes = c('250','500','All','SEPIA')
nbhd.sizes = c('50','100','250','500','1000','SEPIA')
shots = c('104','105','106','All')
features = c("104_1","104_2","104_3","104_4",
"105_1","105_2","105_3","105_4",
"106_1","106_2","106_3","106_4",
"All")
em.types = c('sep','joint')
df.mape = data.frame(data.subsamp = factor(levels=subsample.sizes,ordered=T),
nbhd.size = factor(levels=nbhd.sizes, ordered=T),
shot = factor(levels=shots,ordered=T),
feature = factor(levels=features,ordered=T),
em = factor(levels=em.types,ordered = T),
mape = numeric())
mape.means.250 = t(apply(mape.250,2:3,mean))
mape.median.250 = t(apply(mape.250,2:3,median))
mape.means.500 = t(apply(mape.500,2:3,mean))
mape.median.500 = t(apply(mape.500,2:3,median))
mape.means.all = t(apply(mape.all,2:3,mean))
mape.median.all = t(apply(mape.all,2:3,median))
mape.median.all
sepia_cv = t(R.matlab::readMat('SEPIA_loocv_pred.mat')$cvpred)
sim = 10000*cbind(as.matrix(read.csv("../data/ysim_104.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_105.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_106.csv")[c(4,6,8,10)]))
sepia_ape = 100*abs(sepia_cv-sim)/sim
sepia_ape_mean = apply(sepia_ape,2,mean)
sepia_ape_median = apply(sepia_ape,2,median)
for(j in 1:5){
df.mape = rbind(df.mape,data.frame(data.subsamp = '250',
nbhd.size = nbhd.sizes[j],
shot = rep(shots[1:3],each=4),
feature = features[1:12],
em = em.types[2],
mape = mape.median.250[j,]))
df.mape = rbind(df.mape,data.frame(data.subsamp = '250',
nbhd.size = nbhd.sizes[j],
shot = shots[4],
feature = features[13],
em = em.types[2],
mape = mean(mape.median.250[j,])))
# 500
df.mape = rbind(df.mape,data.frame(data.subsamp = '500',
nbhd.size = nbhd.sizes[j],
shot = rep(shots[1:3],each=4),
feature = features[1:12],
em = em.types[2],
mape = mape.median.500[j,]))
df.mape = rbind(df.mape,data.frame(data.subsamp = '500',
nbhd.size = nbhd.sizes[j],
shot = shots[4],
feature = features[13],
em = em.types[2],
mape = mean(mape.median.500[j,])))
# 1000 (all)
df.mape = rbind(df.mape,data.frame(data.subsamp = 'All',
nbhd.size = nbhd.sizes[j],
shot = rep(shots[1:3],each=4),
feature = features[1:12],
em = em.types[2],
mape = mape.median.all[j,]))
df.mape = rbind(df.mape,data.frame(data.subsamp = 'All',
nbhd.size = nbhd.sizes[j],
shot = shots[4],
feature = features[13],
em = em.types[2],
mape = mean(mape.median.all[j,])))
}
#save(df.mape,file='data/MAPE.Rdata')
ape_mean = apply(sepia_ape,2,mean)
ape_median = apply(sepia_ape,2,median)
df.mape = rbind(df.mape,data.frame(data.subsamp = subsample.sizes[4],
nbhd.size=nbhd.sizes[6],
shot=c(rep(shots[1:3],each=4),shots[4]),
feature=features,
em=em.types[2],
mape = c(ape_median,mean(ape_median))))
df.mape$data.subsamp = factor(df.mape$data.subsamp,levels=subsample.sizes,ordered=T)
df.mape$nbhd.size = factor(df.mape$nbhd.size,levels=nbhd.sizes, ordered=T)
df.mape$shot = factor(df.mape$shot,levels=shots,ordered=T)
df.mape$feature = factor(df.mape$feature,levels=features,ordered=T)
category_order = c("104_1","104_3","105_1","105_3",
"106_1","106_3","104_2","104_4",
"105_2","105_4","106_2","106_4",
"All")
df.mape$feature = factor(df.mape$feature, levels=category_order)
p = ggplot(df.mape) + geom_point(aes(x=feature,y=mape,color=nbhd.size,shape=data.subsamp),size=3,position=position_jitter(w = 0.2, h = 0)) +
scale_colour_manual(values=cbPalette) + scale_shape_manual(values=c(15,16,17,8)) +
labs(x='Feature',y='MAPE [%]',color='Neignborhood Size',shape='Subsample Size',title='Leave-One-Out CV') + coord_cartesian(ylim=c(0,6))
plot(p)
p = ggplot(df.mape) + geom_point(aes(x=feature,y=mape,color=nbhd.size,shape=data.subsamp),size=3,position=position_jitter(w = 0.2, h = 0)) +
scale_colour_manual(values=cbPalette) + scale_shape_manual(values=c(15,16,17,8)) +
labs(x='Feature',y='MAPE [%]',color='Neignborhood Size',shape='Subsample Size',title='Leave-One-Out CV') + coord_cartesian(ylim=c(0,7))
plot(p)
library(doParallel)
knitr::opts_chunk$set(echo = TRUE)
lambda.true = .25
rho.true = 3
mu.true = 1
sigma.true = .1
fuel = gen_fuels(dimX = 30, dimY = 30,
density = lambda.true,                 # shrubs per unit area
heterogeneity = rho.true,     # level of heterogeneity in shrub placement
heterogeneity.scale = 1,      # scale of the mean-zero GP realization
radius = mu.true, sd_radius = sigma.true,  # normal distribution parameters for shrub radius
height = NULL, sd_height = 0, # normal distribution parameters for shrub height
reps=1,                       # number of random maps to generate
GP.init.size=100,             # How densely to sample GP (n^3 scaling, <=1000 is pretty fast)
seed=10)                      # random seed for reproducibility)
library(FlaGP)
library(doParallel)
knitr::opts_chunk$set(echo = TRUE)
lambda.true = .25
rho.true = 3
mu.true = 1
sigma.true = .1
fuel = gen_fuels(dimX = 30, dimY = 30,
density = lambda.true,                 # shrubs per unit area
heterogeneity = rho.true,     # level of heterogeneity in shrub placement
heterogeneity.scale = 1,      # scale of the mean-zero GP realization
radius = mu.true, sd_radius = sigma.true,  # normal distribution parameters for shrub radius
height = NULL, sd_height = 0, # normal distribution parameters for shrub height
reps=1,                       # number of random maps to generate
GP.init.size=100,             # How densely to sample GP (n^3 scaling, <=1000 is pretty fast)
seed=10)                      # random seed for reproducibility)
library(doParallel)
knitr::opts_chunk$set(echo = TRUE)
lambda.true = .25
rho.true = 3
mu.true = 1
sigma.true = .1
fuel = gen_fuels(dimX = 30, dimY = 30,
density = lambda.true,                 # shrubs per unit area
heterogeneity = rho.true,     # level of heterogeneity in shrub placement
heterogeneity.scale = 1,      # scale of the mean-zero GP realization
radius = mu.true, sd_radius = sigma.true,  # normal distribution parameters for shrub radius
height = NULL, sd_height = 0, # normal distribution parameters for shrub height
reps=1,                       # number of random maps to generate
GP.init.size=100,             # How densely to sample GP (n^3 scaling, <=1000 is pretty fast)
seed=10)                      # random seed for reproducibility)
roxygen2::roxygenize()
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbPalette <- c("#999999", "#CC79A7", "#009E73", "#0072B2", "#F0E442","#D55E00")
library(tibble)
library(ggplot2)
setwd("~/FlaGP/examples/Al-5083/paper")
load('Al-5083_JEm_ss_250.RData')
legnth(flagp.predictions)
length(flagp.predictions)
length(flagp.predictions[[1]])
flagp.predictions[[1]][[1]]
i=1
j=1
pred = flagp.predictions[[i]][[j]]$y.mean
pred
pred[c(5,7,9,11)] = pred[c(5,7,9,11)]^2
pred
# recompute mape on native scale not sqrt scale
mape.250 = mape_native_from_sqrt(flagp.predictions,sim)
mape_native_from_sqrt = function(flagp.predictions,sim){
mape = array(dim = c(1000,12,5))
for(i in 1:1000){
for(j in 1:5){
pred = flagp.predictions[[i]][[j]]$y.mean
pred[c(5,7,9,11)] = pred[c(5,7,9,11)]^2
mape[i,,j] = 100*abs(pred-sim[i,])/sim[i,]
}
}
return(mape)
}
setwd("~/FlaGP/examples/Al-5083/paper")
load('Al-5083_JEm_ss_250.RData')
mape.250 = mape_native_from_sqrt(flagp.predictions,sim)
sim = 10000*cbind(as.matrix(read.csv("../data/ysim_104.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_105.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_106.csv")[c(4,6,8,10)]))
mape.250 = mape_native_from_sqrt(flagp.predictions,sim)
mape
mape.250
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbPalette <- c("#999999", "#CC79A7", "#009E73", "#0072B2", "#F0E442","#D55E00")
library(tibble)
library(ggplot2)
sim = 10000*cbind(as.matrix(read.csv("../data/ysim_104.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_105.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_106.csv")[c(4,6,8,10)]))
# recompute mape on native scale not sqrt scale
mape_native_from_sqrt = function(flagp.predictions,sim){
mape = array(dim = c(1000,12,5))
for(i in 1:1000){
for(j in 1:5){
pred = flagp.predictions[[i]][[j]]$y.mean
pred[c(5,7,9,11)] = pred[c(5,7,9,11)]^2
mape[i,,j] = 100*abs(pred-sim[i,])/sim[i,]
}
}
return(mape)
}
setwd("~/FlaGP/examples/Al-5083/paper")
load('Al-5083_JEm_ss_250.RData')
mape.250 = mape_native_from_sqrt(flagp.predictions,sim)
#mape.250 = mape
load('Al-5083_JEm_ss_500.RData')
#mape.500 = mape
mape.500 = mape_native_from_sqrt(flagp.predictions,sim)
load('Al-5083_JEm.RData')
#mape.all = mape
mape.all = mape_native_from_sqrt(flagp.predictions,sim)
subsample.sizes = c('250','500','All','SEPIA')
nbhd.sizes = c('50','100','250','500','1000','SEPIA')
shots = c('104','105','106','All')
features = c("104_1","104_2","104_3","104_4",
"105_1","105_2","105_3","105_4",
"106_1","106_2","106_3","106_4",
"All")
em.types = c('sep','joint')
df.mape = data.frame(data.subsamp = factor(levels=subsample.sizes,ordered=T),
nbhd.size = factor(levels=nbhd.sizes, ordered=T),
shot = factor(levels=shots,ordered=T),
feature = factor(levels=features,ordered=T),
em = factor(levels=em.types,ordered = T),
mape = numeric())
mape.means.250 = t(apply(mape.250,2:3,mean))
mape.median.250 = t(apply(mape.250,2:3,median))
mape.means.500 = t(apply(mape.500,2:3,mean))
mape.median.500 = t(apply(mape.500,2:3,median))
mape.means.all = t(apply(mape.all,2:3,mean))
mape.median.all = t(apply(mape.all,2:3,median))
sepia_cv = t(R.matlab::readMat('SEPIA_loocv_pred.mat')$cvpred)
sim = 10000*cbind(as.matrix(read.csv("../data/ysim_104.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_105.csv")[c(4,6,8,10)]),
as.matrix(read.csv("../data/ysim_106.csv")[c(4,6,8,10)]))
sepia_ape = 100*abs(sepia_cv-sim)/sim
sepia_ape_mean = apply(sepia_ape,2,mean)
sepia_ape_median = apply(sepia_ape,2,median)
for(j in 1:5){
df.mape = rbind(df.mape,data.frame(data.subsamp = '250',
nbhd.size = nbhd.sizes[j],
shot = rep(shots[1:3],each=4),
feature = features[1:12],
em = em.types[2],
mape = mape.median.250[j,]))
df.mape = rbind(df.mape,data.frame(data.subsamp = '250',
nbhd.size = nbhd.sizes[j],
shot = shots[4],
feature = features[13],
em = em.types[2],
mape = mean(mape.median.250[j,])))
# 500
df.mape = rbind(df.mape,data.frame(data.subsamp = '500',
nbhd.size = nbhd.sizes[j],
shot = rep(shots[1:3],each=4),
feature = features[1:12],
em = em.types[2],
mape = mape.median.500[j,]))
df.mape = rbind(df.mape,data.frame(data.subsamp = '500',
nbhd.size = nbhd.sizes[j],
shot = shots[4],
feature = features[13],
em = em.types[2],
mape = mean(mape.median.500[j,])))
# 1000 (all)
df.mape = rbind(df.mape,data.frame(data.subsamp = 'All',
nbhd.size = nbhd.sizes[j],
shot = rep(shots[1:3],each=4),
feature = features[1:12],
em = em.types[2],
mape = mape.median.all[j,]))
df.mape = rbind(df.mape,data.frame(data.subsamp = 'All',
nbhd.size = nbhd.sizes[j],
shot = shots[4],
feature = features[13],
em = em.types[2],
mape = mean(mape.median.all[j,])))
}
#save(df.mape,file='data/MAPE.Rdata')
ape_mean = apply(sepia_ape,2,mean)
ape_median = apply(sepia_ape,2,median)
df.mape = rbind(df.mape,data.frame(data.subsamp = subsample.sizes[4],
nbhd.size=nbhd.sizes[6],
shot=c(rep(shots[1:3],each=4),shots[4]),
feature=features,
em=em.types[2],
mape = c(ape_median,mean(ape_median))))
df.mape$data.subsamp = factor(df.mape$data.subsamp,levels=subsample.sizes,ordered=T)
df.mape$nbhd.size = factor(df.mape$nbhd.size,levels=nbhd.sizes, ordered=T)
df.mape$shot = factor(df.mape$shot,levels=shots,ordered=T)
df.mape$feature = factor(df.mape$feature,levels=features,ordered=T)
category_order = c("104_1","104_3","105_1","105_3",
"106_1","106_3","104_2","104_4",
"105_2","105_4","106_2","106_4",
"All")
df.mape$feature = factor(df.mape$feature, levels=category_order)
p = ggplot(df.mape) + geom_point(aes(x=feature,y=mape,color=nbhd.size,shape=data.subsamp),size=3,position=position_jitter(w = 0.2, h = 0)) +
scale_colour_manual(values=cbPalette) + scale_shape_manual(values=c(15,16,17,8)) +
labs(x='Feature',y='MAPE [%]',color='Neignborhood Size',shape='Subsample Size',title='Leave-One-Out CV') + coord_cartesian(ylim=c(0,7))
plot(p)
p = ggplot(df.mape) + geom_point(aes(x=feature,y=mape,color=nbhd.size,shape=data.subsamp),size=3,position=position_jitter(w = 0.2, h = 0)) +
scale_colour_manual(values=cbPalette) + scale_shape_manual(values=c(15,16,17,8)) +
labs(x='Feature',y='MAPE [%]',color='Neignborhood Size',shape='Subsample Size',title='Leave-One-Out CV') + coord_cartesian(ylim=c(0,8))
plot(p)
p = ggplot(df.mape) + geom_point(aes(x=feature,y=mape,color=nbhd.size,shape=data.subsamp),size=3,position=position_jitter(w = 0.2, h = 0)) +
scale_colour_manual(values=cbPalette) + scale_shape_manual(values=c(15,16,17,8)) +
labs(x='Feature',y='MAPE [%]',color='Neignborhood Size',shape='Subsample Size',title='Leave-One-Out CV') + coord_cartesian(ylim=c(0,10))
plot(p)
